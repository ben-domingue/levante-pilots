---
format: html
---
  
```{r setup}
source("_setup.R")

trials_coded <- read_rds("data_processed/trials_coded.rds")
participants <- read_rds("data_processed/participants.rds")
```

```{r participant_summary}
# get by-participant correctness and completeness
participant_summary <- trials_coded |>
  group_by(task_group, task, user_id, run_id) |>
  summarise(trials = n(),
            num_correct = sum(is_correct, na.rm = TRUE),
            prop_correct = num_correct / trials) |>
  ungroup() |>
  left_join(participants) |>
  group_by(task) |>
  mutate(n = n(),
         n_age = length(discard(age, is.na)),
         task_label = glue("{task}\n(n = {n})"),
         task_label_age = glue("{task}\n(n = {n_age})"),
         prop_trials = trials / max(trials)) |>
  ungroup() |>
  mutate(task_label = fct_inorder(task_label),
         task_label_age = fct_inorder(task_label_age),
         is_zero = prop_correct == 0)
```

Plot correctness distribution by task

```{r}
ggplot(participant_summary, aes(x = "", y = prop_correct)) +
  facet_wrap(vars(task_label), nrow = 3) +
  geom_sina(aes(colour = task_group, size = prop_trials), alpha = 0.8) +
  scale_colour_ptol() +
  scale_size_binned(range = c(0.05, 2.5)) +
  labs(y = "Subject's proportion of correct responses",
       size = "Proportion of trials completed") +
  guides(colour = "none") +
  theme(axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        strip.text = element_text(size = 8),
        legend.position = "bottom",
        legend.key.width = unit(2, "lines"))
ggsave("plots/subject_correct.png", width = 14, height = 9)
```

Plot zero proportion distribution by task

```{r}
ggplot(participant_summary, 
       aes(x = prop_correct, fill = is_zero)) +
  facet_wrap(vars(task_label), nrow = 3) +
  geom_histogram(aes(y = after_stat(density)), color = 1) + 
  labs(x = "Subject's proportion of correct responses", 
       y = "Density") +
 geom_density() + 
  theme(axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        strip.text = element_text(size = 8),
        legend.position = "bottom",
        legend.key.width = unit(2, "lines"))
```

Plot completeness distribution by task

```{r}
ggplot(participant_summary, aes(x = "", y = prop_trials)) +
  facet_wrap(vars(task_label), nrow = 3) +
  geom_sina(aes(colour = task_group)) +
  scale_colour_ptol() +
  labs(y = "Subject's proportion of trials completed") +
  guides(colour = "none") +
  theme(axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        strip.text = element_text(size = 8))
ggsave("plots/subject_completed.png", width = 14, height = 8)
```

Plot correctness over age by task

```{r}
ggplot(participant_summary |> filter(!is.na(age)), aes(x = age, y = prop_correct)) +
  facet_wrap(vars(task_label_age), nrow = 3) +
  geom_smooth(method = "lm", colour = "darkgrey") +
  geom_point(aes(colour = task_group, size = prop_trials), alpha = 0.8) +
  scale_y_continuous(limits = c(0, 1)) +
  scale_colour_ptol() +
  scale_size_binned(range = c(0.05, 2.5)) +
  labs(x = "Age (years)", y = "Subject's proportion correct responses",
       size = "Proportion of trials completed") +
  guides(colour = "none") +
  theme(legend.position = "bottom",
        legend.key.width = unit(2, "lines"),
        strip.text = element_text(size = 8))
ggsave("plots/subject_correct_age.png", width = 14, height = 9)
```

Plot completeness over age by task

```{r}
ggplot(participant_summary |> filter(!is.na(age)), aes(x = age, y = prop_trials)) +
  facet_wrap(vars(task_label_age), nrow = 3) +
  geom_smooth(method = "lm", colour = "darkgrey") +
  geom_point(aes(colour = task_group), alpha = 0.8) +
  scale_y_continuous(limits = c(0, 1)) +
  scale_colour_ptol() +
  labs(x = "Age (years)", y = "Subject's proportion trials completed") +
  guides(colour = "none") +
  theme(strip.text = element_text(size = 8))
ggsave("plots/subject_completed_age.png", width = 14, height = 8)
```

```{r}
trials_items <- trials_coded |>
  filter(!is.na(item)) |>
  group_by(task, item, expected_answer) |>
  mutate(item_id = cur_group_id())

# get by-item summaries
item_summary <- trials_items |>
  group_by(task_group, task, item_id, item, expected_answer) |>
  summarise(subjects = n_distinct(user_id),
            trials = n(),
            num_correct = sum(is_correct, na.rm = TRUE),
            prop_correct = num_correct / trials) |>
  ungroup()

item_summary |> count(task)

# items with very high correctness
high_correct <- item_summary |>
  filter(prop_correct >= 0.95) |>
  select(task, item_id, item, expected_answer, trials, prop_correct) |>
  arrange(task, desc(prop_correct))

high_correct |> count(task, sort = TRUE)
# write_csv(high_correct, "data/high_correct_items.csv")
```

```{r}
score_list <- map(list.files("scores", full.names = TRUE), read_rds)
exclude_tasks <- c("hostile-attribution", "pa-es")

task_categories <- tribble(
  ~task, ~task_category,
  "hearts-and-flowers", "executive function",
  "same-different-selection", "executive function",
  "memory-game", "executive function",
  "egma-math", "math",
  "trog", "language",
  "vocab", "language",
  "pa-es", "reading",
  "sre-es", "reading",
  "swr-es", "reading",
  "matrix-reasoning", "reasoning",
  "mental-rotation", "spatial cognition",
  "theory-of-mind", "social cognition",
  "hostile-attribution", "social cognition"
) |> mutate(task_category = task_category |> str_to_sentence() |> fct_inorder())

scores <- score_list |>
  bind_rows() |>
  filter(!(task %in% exclude_tasks)) |>
  left_join(participants |> select(user_id, age)) |>
  group_by(task) |>
  mutate(n = n(), task_label = glue("{task}\n(n = {n})")) |>
  ungroup() |>
  left_join(task_categories) |>
  mutate(score_type = score_type |> str_remove(" \\(.*\\)"))
  
# scores |> count(task_id)

ggplot(scores |> filter(!is.na(age)), aes(x = age, y = score)) +
  ggh4x::facet_nested_wrap(vars(task_category, task_label), nrow = 3,
                      nest_line = element_line(), solo_line = TRUE,
                      axes = "x",
                      scales = "free_y") +
  geom_point(aes(colour = task_category), alpha = 0.5) +
  geom_smooth(method = "gam", colour = "darkgrey") +
  # geom_text(aes(label = score_type), x = Inf, y = 0.05, hjust = 1, vjust = 0,
  #           family = .font) +
  # scale_y_continuous() +
  scale_x_continuous(breaks = seq(6, 14, 2)) +
  scale_colour_ptol() +
  # scale_shape_manual(values = c(19, 1), guide = "none") +
  # scale_size_binned(range = c(0.05, 2.5)) +
  labs(x = "Age (years)", y = "Score") +
  guides(colour = "none") +
  theme(legend.position = "bottom",
        legend.key.width = unit(2, "lines"),
        strip.text = element_text(size = 8))
ggsave("plots/all_scores.png", width = 10, height = 8)
```

