---
format: html
---
  
```{r}
library(tidyverse)
library(glue)
library(ggforce)
library(ggthemes)

.font <- "Source Sans Pro"
theme_set(theme_bw(base_size = 14, base_family = .font))
theme_update(panel.grid = element_blank(),
             strip.background = element_blank(),
             legend.key = element_blank(),
             panel.border = element_blank(),
             axis.line = element_line(),
             strip.text = element_text(face = "bold"))
```

```{r, load-mefs-data}
mefs1 <- read_csv("data/MEFS/LEVANTE_20240608_1210.csv") %>% # long format data
  filter(`Child ID` != "1234") # remove test
mefs2 <- read_csv("data/MEFS/LEVANTE_20240608_1225.csv") %>% # N=122; wide format data
  filter(`Child ID` != "1234")

# standardized by age, looks like
cor.test(mefs2$`A1_Standard Score`, mefs2$`A1_Age (Months)`) 
cor.test(mefs2$`A1_Percentile (National)`, mefs2$`A1_Age (Months)`) 

cor.test(mefs2$`A1_Total Score`, mefs2$`A1_Age (Months)`) # r=.56
```


```{r}
org <- redivis::organization("levante")
dataset_names <- c("columbia_pilot_0523_0529:f068:v2_1",
                   "columbia_pilot_0523_0530_users_collection:fa9g:v2_1")
datasets <- dataset_names |> set_names() |> map(\(dn) org$dataset(dn))

get_dataset_tables <- \(ds) ds$list_tables() |> set_names() |> map(\(t) ds$table(t$name)$to_tibble())
dataset_tables <- map(datasets, get_dataset_tables)

collect_tables <- \(table_name) datasets |> map(\(d) d$table(table_name)$to_tibble())
run <- collect_tables("runs")
trial <- collect_tables("trials")
user <- collect_tables("users")

runs <- run |> list_rbind()

users <- user |>
  map(\(u) u |>
        mutate(across(where(is_character), \(x) na_if(x, "null"))) |>
        mutate(across(c(birth_year, birth_month), as.integer),
               email_verified = email_verified |> as.logical())) |>
  list_rbind()

trials <- trial |>
  map(\(u) u |>
        mutate(across(where(is_character), \(x) na_if(x, "null"))) |>
        mutate(difficulty = difficulty |> as.double())) |>
  list_rbind()
```

```{r}
trials |> count(task_id)

# missing is_practice
trials |> filter(is.na(is_practice)) |> count(task_id)
trials |> filter(is.na(is_practice)) |> count(task_id, assessment_stage)

# missing expected_answer
trials |> filter(!is.na(is_practice), is.na(expected_answer)) |> count(task_id)

user_ids <- users |>
  filter(user_type %in% c("guest", "student")) |>
  select(user_id, assessment_pid, birth_month, birth_year, created_at) |>
  semi_join(trials) |>
  mutate(dob = ym(paste(birth_year, birth_month, sep = "-")),
         age = as.numeric(difftime(today(), dob, units = "days")) / 365.25) |>
  filter(age < 16)

trials_ids <- trials |> left_join(user_ids)

trials_filtered <- trials_ids |>
  mutate(practice = !is.na(is_practice) & is_practice | assessment_stage == "practice_response") |>
  filter(!practice) |>
  select(-practice, -is_practice)

trials_filtered |> count(task_id)

trials_coded <- trials_filtered |>
  filter(!(task_id %in% c("pa", "sre", "swr"))) |>
  mutate(task_group = case_when(
    task_id %in% c("letter", "pa", "pa-es", "sre", "sre-es", "swr", "swr-es", "vocab") ~ "ROAR",
    str_detect(task_id, "egma") ~ "EGMA",
    task_id == "hearts-and-flowers" ~ "H&F",
    task_id == "theory-of-mind" ~ "ToM",
    task_id == "mental-rotation" ~ task_id,
    TRUE ~ task_id
  )) |>
  mutate(corpus_trial_type = if_else(task_group == "EGMA" & !is.na(item) & is.na(corpus_trial_type),
                                     "Number Line", corpus_trial_type),
         corpus_trial_type = str_to_lower(corpus_trial_type)) |>
  mutate(subtask = case_when(
    task_group %in% c("EGMA", "mental-rotation") ~ corpus_trial_type,
    task_group == "ROAR" ~ task_id,
    str_detect(task_id, "hearts|theory") ~ str_remove_all(assessment_stage, " stimulus"))) |>
  mutate(task = if_else(is.na(subtask), task_id, glue("{task_group} ({subtask})"))) |>
  filter(!is.na(item) | !is.na(expected_answer) | !is.na(response)) |>
  mutate(is_correct = is_correct | str_detect(task, "hostile") & !str_detect(response, "accident"))

trials_coded |> count(task_group, task)

subject_summary <- trials_coded |>
  add_count(user_id, run_id, name = "run_trials") |>
  arrange(desc(run_trials), server_timestamp) |>
  mutate(task_group = fct_inorder(task_group),
         task = fct_inorder(task)) |> #pull(task) |> levels()
  group_by(task_group, task, user_id, run_id) |>
  summarise(trials = n(),
            num_correct = sum(is_correct, na.rm = TRUE),
            prop_correct = num_correct / trials) |>
  ungroup() |>
  left_join(user_ids) |>
  group_by(task) |>
  mutate(n = n(),
         n_age = length(discard(age, is.na)),
         task_label = glue("{task}\n(n = {n})"),
         task_label_age = glue("{task}\n(n = {n_age})"),
         prop_trials = trials / max(trials)) |>
  ungroup() |>
  mutate(task_label = fct_inorder(task_label),
         task_label_age = fct_inorder(task_label_age))
```

```{r}
ggplot(subject_summary, aes(x = "", y = prop_correct)) +
  facet_wrap(vars(task_label), nrow = 3) +
  geom_sina(aes(colour = task_group, size = prop_trials), alpha = 0.8) +
  scale_colour_ptol() +
  scale_size_binned(range = c(0.05, 2.5)) +
  labs(y = "Subject's proportion of correct responses",
       size = "Proportion of trials completed") +
  guides(colour = "none") +
  theme(axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        strip.text = element_text(size = 8),
        legend.position = "bottom",
        legend.key.width = unit(2, "lines"))
ggsave("plots/subject_correct.png", width = 14, height = 9)

ggplot(subject_summary, aes(x = "", y = prop_trials)) +
  facet_wrap(vars(task_label), nrow = 3) +
  geom_sina(aes(colour = task_group)) +
  scale_colour_ptol() +
  labs(y = "Subject's proportion of trials completed") +
  guides(colour = "none") +
  theme(axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        strip.text = element_text(size = 8))
ggsave("plots/subject_completed.png", width = 14, height = 8)

ggplot(subject_summary |> filter(!is.na(age)), aes(x = age, y = prop_correct)) +
  facet_wrap(vars(task_label_age), nrow = 3) +
  geom_smooth(method = "lm", colour = "darkgrey") +
  geom_point(aes(colour = task_group, size = prop_trials), alpha = 0.8) +
  scale_y_continuous(limits = c(0, 1)) +
  scale_colour_ptol() +
  scale_size_binned(range = c(0.05, 2.5)) +
  labs(x = "Age (years)", y = "Subject's proportion correct responses",
       size = "Proportion of trials completed") +
  guides(colour = "none") +
  theme(legend.position = "bottom",
        legend.key.width = unit(2, "lines"),
        strip.text = element_text(size = 8))
ggsave("plots/subject_correct_age.png", width = 14, height = 9)

ggplot(subject_summary |> filter(!is.na(age)), aes(x = age, y = prop_trials)) +
  facet_wrap(vars(task_label_age), nrow = 3) +
  geom_smooth(method = "lm", colour = "darkgrey") +
  geom_point(aes(colour = task_group), alpha = 0.8) +
  scale_y_continuous(limits = c(0, 1)) +
  scale_colour_ptol() +
  labs(x = "Age (years)", y = "Subject's proportion trials completed") +
  guides(colour = "none") +
  theme(strip.text = element_text(size = 8))
ggsave("plots/subject_completed_age.png", width = 14, height = 8)
```

H&F

accuracy
+ accuracy (% correct)
+ non-responses -> incorrect
+ responses within 200 ms of stimulus presentation -> incorrect
- many same responses in a row -> missing
- min number of non-missing responses to calculate composites (5?)

? If participants stop responding to many trials in a row, we count those as missing. (Not sure if you want to implement this.)

RT
+ average RT only on the correct trials
- exclude first trial in block

For memory, we recommend using the number of correct trials. It has more variability than memory span (longest sequence with a correct response), but memory span will be more meaningful to some researchers.

```{r}
#, "memory-game", "same-different-selection"
streak_n <- 2

hf <- trials_coded |>
  filter(task_id %in% c("hearts-and-flowers")) |>
  select(task, subtask, trial_id, user_id, run_id, age, item, expected_answer, server_timestamp,
         response, is_correct, rt) |>
  arrange(user_id, server_timestamp) |>
  mutate(rt = as.numeric(rt), response_fast = rt < 200, response_slow = rt > 2000) |>
         # l1 = lag(response, 1), l2 = lag(response, 2),
         # s = list(l1, l2),
         # streak = n_distinct(c(response, lag(response, 1), lag(response, 2))))
  mutate(correct = !is.na(is_correct) & is_correct & !response_fast & !response_slow)

# accuracy_mod <- glmer(correct ~ age + subtask + (1 | user_id), data = hf, family = "binomial")

hf_accuracy <- hf |>
  group_by(user_id, run_id, age, subtask) |>
  summarise(trials_accuracy = n(), prop_correct = mean(correct)) |>
  ungroup()

hf_rt <- hf |>
  group_by(user_id, run_id, age, subtask) |>
  # mutate(cgr = cur_group_rows()) |>
  # mutate(rt = c(NA, rt[2:n()])) |>
  filter(correct) |>
  summarise(trials_rt = n(), mean_rt = mean(rt, na.rm = TRUE),
            median_rt = median(rt, na.rm = TRUE)) |>
  ungroup()

hf_summary <- hf_accuracy |> left_join(hf_rt)

hf_summary |>
  select(subtask, age, prop_correct, mean_rt) |>
  GGally::ggpairs(aes(color = subtask))
ggsave("plots/hf_ggpairs.png", width = 12, height = 10)

# ggplot(hf_summary, aes(x = age, y = median_rt)) +
#   facet_wrap(vars(subtask)) +
#   geom_point()
# 
# ggplot(hf_accuracy, aes(x = subtask, y = prop_correct)) +
#   # facet_wrap(vars(task_label), nrow = 3) +
#   geom_sina(aes(colour = subtask, size = trials), alpha = 0.8) +
#   scale_colour_ptol() +
#   scale_size_binned(range = c(0.05, 2.5)) +
#   # labs(y = "Subject's proportion of correct responses",
#   #      size = "Proportion of trials completed") +
#   guides(colour = "none") +
#   theme(axis.ticks.x = element_blank(),
#         axis.title.x = element_blank(),
#         strip.text = element_text(size = 8),
#         legend.position = "bottom",
#         legend.key.width = unit(2, "lines"))
# 
# ggplot(subject_summary |> filter(!is.na(age)), aes(x = age, y = prop_correct)) +
#   facet_wrap(vars(task_label_age), nrow = 3) +
#   geom_smooth(method = "lm", colour = "darkgrey") +
#   geom_point(aes(colour = task_group, size = prop_trials), alpha = 0.8) +
#   scale_y_continuous(limits = c(0, 1)) +
#   scale_colour_ptol() +
#   scale_size_binned(range = c(0.05, 2.5)) +
#   labs(x = "Age (years)", y = "Subject's proportion correct responses",
#        size = "Proportion of trials completed") +
#   guides(colour = "none") +
#   theme(legend.position = "bottom",
#         legend.key.width = unit(2, "lines"),
#         strip.text = element_text(size = 8))
```


```{r}
sds <- trials_coded |>
  filter(task_id %in% c("same-different-selection")) |>
  select(task, subtask, corpus_trial_type, trial_id, run_id, user_id, age, item, expected_answer, server_timestamp,
         response, is_correct) |>
  arrange(user_id, server_timestamp) |>
  mutate(corpus_trial_type = fct_inorder(corpus_trial_type))
  # arrange(user_id, server_timestamp)
  # mutate(rt = as.numeric(rt)) #, response_fast = rt < 200, response_slow = rt > 2000) |>
         # l1 = lag(response, 1), l2 = lag(response, 2),
         # s = list(l1, l2),
         # streak = n_distinct(c(response, lag(response, 1), lag(response, 2))))
  # mutate(correct = !is.na(is_correct) & is_correct & !response_fast & !response_slow)

sds_summary <- sds |>
  group_by(user_id, run_id, age, corpus_trial_type) |>
  summarise(trials_accuracy = n(), prop_correct = mean(is_correct)) |>
  ungroup()

# sds_summary |>
#   group_by(corpus_trial_type) |>
#   filter(!is.na(age)) |>
#   summarise(n = n(),
#             correct_age_cor = cor(age, prop_correct,use = "complete.obs"))

ggplot(sds_summary, aes(x = age, y = prop_correct)) +
  facet_wrap(vars(corpus_trial_type), nrow = 1) +
  geom_smooth(method = "lm") +
  geom_point(aes(size = trials_accuracy)) +
  scale_size_continuous(range = c(0.2, 3)) +
  ylim(c(0, 1)) +
  labs(x = "Age (years)", y = "Subject's proportion correct responses",
       size = "Number of trials completed") +
  theme(legend.position = "bottom")
ggsave("plots/sds_subtasks.png", width = 12, height = 3.5)

sds_trial_min <- 10
sds_composite <- sds |>
  filter(corpus_trial_type != "test-dimensions") |>
  group_by(user_id, run_id, age) |>
  summarise(trials_accuracy = n(), prop_correct = mean(is_correct)) |>
  ungroup() |>
  filter(trials_accuracy > sds_trial_min)

ggplot(sds_composite, aes(x = age, y = prop_correct)) +
  geom_smooth(method = "lm") +
  geom_point(aes(size = trials_accuracy)) +
  scale_size_continuous(range = c(0.2, 3)) +
  ylim(c(0, 1)) +
  labs(x = "Age (years)", y = "Subject's proportion correct responses",
       size = "Number of trials completed") +
  theme(legend.position = "bottom")
ggsave("plots/sds_composite.png", width = 6, height = 5)
```

```{r}
mg <- trials_coded |>
  filter(task_id %in% c("memory-game")) |>
  select(task, trial_id, run_id, user_id, age, server_timestamp, response, rt, is_correct) |>
  arrange(user_id, server_timestamp) |>
  mutate(len = str_count(response, ":"))

mg_span <- mg |>
  filter(is_correct) |>
  group_by(user_id, run_id, age) |>
  summarise(trials_span = n(), longest = max(len))

mg_accuracy <- mg |>
  group_by(user_id, run_id, age) |>
  summarise(trials_accuracy = n(), prop_correct = mean(is_correct))

mg_summary <- mg_accuracy |> left_join(mg_span) |> ungroup()

ggplot(mg_summary, aes(x = age, y = longest)) +
  geom_smooth(method = "lm") +
  geom_point() +
  # geom_point(aes(size = trials)) +
  # scale_size_continuous(range = c(0.2, 3)) +
  # ylim(c(0, 1)) +
  labs(x = "Age (years)", y = "Subject's longest correct sequence",
       size = "Number of correct trials")
  # theme(legend.position = "bottom")
ggsave("plots/mg_span.png", width = 6, height = 5)

ggplot(mg_summary, aes(x = age, y = prop_correct)) +
  geom_smooth(method = "lm") +
  # geom_point() +
  geom_point(aes(size = trials_accuracy)) +
  scale_size_continuous(range = c(0.2, 3)) +
  ylim(c(0, 1)) +
  labs(x = "Age (years)", y = "Subject's proportion correct responses",
       size = "Number of correct trials") +
  theme(legend.position = "bottom")
ggsave("plots/mg_accuracy.png", width = 6, height = 5)
```

```{r}
hf_join <- hf_summary |>
  filter(subtask == "hearts and flowers") |>
  group_by(user_id) |> filter(n() == 1) |> ungroup() |>
  filter(trials_accuracy >= 5) |>
  select(user_id, age, hf_prop_correct = prop_correct, hf_median_rt = median_rt)
  # mutate(hf = "HF")

sds_join <- sds_composite |>
  group_by(user_id) |> filter(n() == 1) |>
  select(user_id, age, sds_trials = trials_accuracy, sds_prop_correct = prop_correct)
  # mutate(sds = "SDS")

mg_join <- mg_summary |>
  group_by(user_id) |> filter(n() == 1) |>
  select(user_id, age, mg_trials = trials_accuracy, mg_prop_correct = prop_correct, mg_span = longest)
  # mutate(mg = "MG")

ef <- hf_join |> full_join(sds_join) |> full_join(mg_join) # unite("task", c(hf, sds, mg), na.rm = TRUE)

ef |> select(-user_id) |> GGally::ggpairs()
ggsave("plots/ef_pairs.png", width = 11, height = 11)
```


```{r}
prop_trials <- subject_summary |> select(task, pid, prop_trials)

get_time_summary <- function(trial_data) {
  trial_data |>
    filter(!is.na(pid)) |>
    mutate(task = fct_inorder(task)) |>
    arrange(task, run_id, user_id, trial_index) |>
    mutate(server_timestamp = as_datetime(server_timestamp)) |>
    group_by(task_group, task, run_id, user_id, pid) |>
    summarise(trials = n(),
              start = min(server_timestamp), end = max(server_timestamp)) |>
    mutate(diff = difftime(end, start, units = "mins")) |>
    group_by(task) |>
    mutate(task_label = glue("{task}\n(n = {n()})")) |>
    ungroup() |>
    mutate(task_label = fct_inorder(task_label)) |>
    left_join(prop_trials) |>
    left_join(subjects)
}
time_summary <- get_time_summary(trials_ids)

time_summary |> count(task)
time_summary |> count(task, pid) |> filter(n == max(n))

ggplot(time_summary, aes(x = "", y = diff, colour = task_label)) +
  facet_wrap(vars(task_label), nrow = 2) +
  geom_sina(aes(colour = task_group)) +
  scale_colour_ptol() +
  labs(y = "Duration (minutes)") +
  guides(colour = "none") +
  theme(axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        strip.text = element_text(size = 8))
ggsave("plots/durations.png", width = 12, height = 5)

ggplot(time_summary, aes(x = age, y = diff)) +
  facet_wrap(vars(task_label), nrow = 2) +
  geom_smooth(method = "lm", colour = "darkgrey") +
  geom_point(aes(colour = task_group), alpha = 0.8) +
  scale_colour_ptol() +
  labs(x = "Age (years)", y = "Duration (minutes)") +
  guides(colour = "none") +
  theme(legend.position = "bottom",
        strip.text = element_text(size = 8))
ggsave("plots/durations_age.png", width = 12, height = 5.5)

ggplot(time_summary, aes(x = prop_trials, y = diff)) +
  facet_wrap(vars(task_label), nrow = 2) +
  # geom_smooth(method = "lm", colour = "darkgrey") +
  geom_point(aes(colour = task_group), alpha = 0.8) +
  scale_colour_ptol() +
  labs(x = "Proportion trials completed", y = "Duration (minutes)") +
  guides(colour = "none") +
  theme(legend.position = "bottom",
        strip.text = element_text(size = 8))
ggsave("plots/durations_completed.png", width = 12, height = 5.5)
```

```{r}
item_summary <- trials_ids |>
  filter(!is.na(item)) |>
  group_by(task_group, task, subtask, item_id, item, expected_answer) |>
  summarise(subjects = n_distinct(pid),
            trials = n(),
            num_correct = sum(correct, na.rm = TRUE),
            prop_correct = num_correct / trials) |>
  ungroup()

item_summary |> count(task)
item_summary |> filter(trials != subjects)

high_correct <- item_summary |>
  filter(prop_correct >= 0.95) |>
  select(task, item_id, item, expected_answer, trials, prop_correct) |>
  arrange(task, desc(prop_correct))

high_correct |> count(task, sort = TRUE)
write_csv(high_correct, "data/high_correct_items.csv")
```

```{r}
trial_times <- trials_ids |>
  filter(!is.na(pid)) |>
  # mutate(task = fct_inorder(task)) |>
  # arrange(user_id, run_id, task, trial_index) |>
  mutate(server_timestamp = as_datetime(server_timestamp)) |>
  arrange(user_id, run_id, server_timestamp) |>
  group_by(user_id, run_id) |>
  mutate(server_timestamp = as_datetime(server_timestamp),
         trial_time = server_timestamp - lag(server_timestamp),
         trial_time_alt = (time_elapsed - lag(time_elapsed)) / 1000) |>
  ungroup() |>
  select(pid, user_id, run_id, task_group, task, item, trial_index, trial_time, trial_time_alt)

trial_times |> filter(trial_time < 0)
trial_times |> group_by(user_id, run_id) |> filter(trial_index < lag(trial_index))

trial_times |>
  group_by(task_group, task, item, trial_index) |>
  summarise(trial_time = median(trial_time, na.rm = TRUE)) |>
  group_by(task_group, task) |>
  summarise(trial_time = median(trial_time, na.rm = TRUE)) |>
  ungroup() |>
  mutate(tt = round(trial_time))

get_durations <- function(times) {
  times |>
    group_by(pid, task_group, task) |>
    summarise(trial_time_total = sum(trial_time, na.rm = TRUE),
              n_items = n_distinct(item)) |>
              # trial_time_alt_total = sum(trial_time_alt, na.rm = TRUE)) |>
    group_by(task_group, task) |>
    summarise(duration_median = median(trial_time_total),
              duration_sd = sd(trial_time_total),
              n_items_mean = mean(n_items))
}

# trial_times |>
#   group_by(pid, task_group, task) |>
#   summarise(trial_time_total = sum(trial_time, na.rm = TRUE),
#             n_items = n_distinct(item_id)) |>
#             # trial_time_alt_total = sum(trial_time_alt, na.rm = TRUE)) |>
#   group_by(task_group, task) |>
#   summarise(duration_median = median(trial_time_total) |> as.numeric(),
#             duration_median = duration_median / 60,
#             n_items_mean = mean(n_items))

# trial_times |> filter(task == "egma (subtraction)")

task_durations <- trial_times |> get_durations() # > mutate(batch = "original")

# task_durations_rev <- trial_times |>
#   filter(!(item_id %in% high_correct$item_id)) |>
#   get_durations() |> mutate(batch = "revised")

sum(task_durations$duration_median)
# sum(task_durations_rev$duration_mean)

# durations_compare <- bind_rows(task_durations, task_durations_rev) |>
#   ungroup() |>
#   mutate(minutes = as.numeric(duration_median) / 60)

# durations_compare |>
#   select(task_group, task, batch, minutes) |>
#   pivot_wider(names_from = batch, values_from = minutes)

ggplot(durations_compare, aes(x = batch, y = duration_mean, fill = task_group)) +
  geom_col(aes(group = task)) +
  scale_fill_ptol() +
  geom_text(aes(label = task_group))

ggplot(durations_compare, aes(x = batch, node = task_group, fill = task_group, value = minutes)) +
  ggsankey::geom_sankey_bump(space = .5, type = "alluvial") +
  # geom_text(aes(label = task_group, y = minutes)) +
  scale_fill_ptol() +
  scale_x_discrete(expand = expansion(0, .1)) +
  labs(x = "Item bank", y = "Duration (minutes)", fill = "Task")
ggsave("plots/duration_sankey.png", width = 6, height = 4)
```

```{r}
# task_times <- read_csv("../../LEVANTE task times.csv")
task_times <- googlesheets4::read_sheet("1OnMKVtxHos8lsKDzF0moeghmRAFSTsD1-OpPF7wArCU", sheet = 2)

adaptive_times <- task_times |>
  mutate(time_starting = if_else(is.na(time_actual), time_original, time_actual),
         time_reduced = if_else(is.na(time_reduced), time_original, time_reduced)) |>
  filter(!is.na(time_starting)) |>
  mutate(time_aspirational = map2_dbl(time_reduced, time_adaptive_empirical, partial(min, na.rm = TRUE))) |>
  select(task_group, task, original = time_starting, revised = time_reduced, adaptive = time_aspirational) |>
  pivot_longer(cols = -c("task_group", "task"), names_to = "batch", values_to = "minutes") |>
  group_by(batch, task_group) |>
  summarise(minutes = sum(minutes)) |>
  ungroup() |>
  mutate(batch = batch |> fct_relevel("original", "revised", "adaptive")) |>
  arrange(desc(batch), minutes) |>
  mutate(task_group = fct_inorder(task_group))
  # group_by(batch) |>
  # mutate(cum_time = cumsum(minutes))
  # arrange(desc(batch))

# dashed line at 60 mins
ggplot(adaptive_times, aes(x = batch, node = task_group, fill = task_group, value = minutes)) +
  ggsankey::geom_sankey_bump(space = .5, type = "alluvial") +
  geom_hline(yintercept = 60, linetype = "dashed") +
  # geom_text(aes(label = task_group, y = cum_time)) +
  scale_fill_ptol() +
  scale_x_discrete(expand = expansion(0, .05)) +
  # scale_x_discrete(expand = expansion(0, c(.05, .2))) +
  guides(fill = guide_legend(reverse = TRUE)) +
  labs(y = "Duration (minutes)") +
  theme(axis.title.x = element_blank(),
        legend.title = element_blank())
        # legend.position = c(1.07, 0.28),
        # plot.margin = unit(c(6, 100, 6, 6), "pt"))
  # labs(x = "Item bank", y = "Duration (minutes)", fill = "Task")

ggsave("plots/duration_sankey_adaptive.png", width = 8, height = 4)
```

```{r}
mr <- trials_ids |>
  filter(task_id == "mental-rotation") |>
  select(pid, item, response, correct, rt) |>
  mutate(rt = as.numeric(rt),
         stim_type = if_else(str_count(item) == 5, "2d", "3d"),
         stim_set = str_sub(item, 1, 1) |> fct_recode("ghost" = "g", "rabbit" = "r", "goat" = "t", "duck" = "d"),
         stim_set = if_else(stim_type == "2d", glue("2d ({stim_set})"), "3d"),
         angle = item |> str_sub(-3) |> as.numeric(),
         angle = if_else(angle > 180, 360 - angle, angle),
         .after = item) |>
  mutate(rt = rt / 1000)

# mr |> distinct(stim_type, stim_set, angle, item) |> count(stim_type, stim_set, angle)

mr_subject_type <- mr |>
  group_by(pid, stim_type, angle) |>
  summarise(items = n_distinct(item),
            prop_correct = mean(correct, na.rm = TRUE))

mr_type <- mr_subject_type |>
  group_by(stim_type, angle) |>
  summarise(accuracy = mean(prop_correct),
            sd = sd(prop_correct),
            n = n(),
            se = sd / sqrt(n))

ggplot(mr_subject_type, aes(x = angle, y = prop_correct, colour = stim_type)) +
  facet_grid(cols = vars(stim_type), scales = "free_x", space = "free_x") +
  geom_jitter(alpha = 0.5, size = 0.8) +
  geom_pointrange(aes(y = accuracy, ymin = accuracy - 1.96 * se, ymax = accuracy + 1.96 * se),
                  data = mr_type) +
  geom_line(aes(y = accuracy), data = mr_type) +
  scale_x_continuous(breaks = unique(mr_subject_type$angle)) +
  scale_colour_ptol(guide = "none") +
  labs(x = "Angle", y = "Proportion correct responses", colour = "")
ggsave("plots/mr_accuracy_type.png", width = 6, height = 3.5)

mr_subject_set <- mr |>
  group_by(pid, stim_type, stim_set, angle) |>
  summarise(items = n_distinct(item),
            prop_correct = mean(correct, na.rm = TRUE))

mr_set <- mr_subject_set |>
  group_by(stim_type, stim_set, angle) |>
  summarise(accuracy = mean(prop_correct),
            sd = sd(prop_correct),
            n = n(),
            se = sd / sqrt(n))

ggplot(mr_subject_set, aes(x = angle, y = prop_correct, colour = stim_type)) +
  facet_grid(cols = vars(stim_set), scales = "free_x", space = "free_x") +
  geom_jitter(alpha = 0.5, size = 0.8) +
  geom_pointrange(aes(y = accuracy, ymin = accuracy - 1.96 * se, ymax = accuracy + 1.96 * se),
                  data = mr_set, position = position_dodge(width = 10)) +
  geom_line(aes(y = accuracy), data = mr_set) +
  scale_x_continuous(breaks = unique(mr_subject_set$angle)) +
  scale_colour_ptol(guide = "none") +
  labs(x = "Angle", y = "Proportion correct responses", colour = "")
ggsave("plots/mr_accuracy_set.png", width = 11, height = 3.5)
```

```{r}
mr_subject_type_rt <- mr |>
  group_by(pid, stim_type, angle, correct) |>
  summarise(items = n_distinct(item),
            median_rt = median(rt, na.rm = TRUE)) |>
  mutate(correct = if_else(correct, "corrent", "incorrect"))

mr_type_rt <- mr_subject_type_rt |>
  group_by(stim_type, angle, correct) |>
  summarise(rt = mean(median_rt),
            sd = sd(median_rt),
            n = n(),
            se = sd / sqrt(n))

ggplot(mr_subject_type_rt, aes(x = angle, y = median_rt, colour = stim_type)) +
  facet_grid(cols = vars(stim_type), rows = vars(correct), scales = "free_x", space = "free_x") +
  geom_jitter(alpha = 0.5, size = 0.8) +
  geom_pointrange(aes(y = rt, ymin = rt - 1.96 * se, ymax = rt + 1.96 * se),
                  data = mr_type_rt) +
  geom_line(aes(y = rt), data = mr_type_rt) +
  scale_x_continuous(breaks = unique(mr_subject_type$angle)) +
  scale_colour_ptol(guide = "none") +
  labs(x = "Angle", y = "Response time (seconds)", colour = "")
ggsave("plots/mr_rt_type.png", width = 6, height = 5)

mr_subject_set_rt <- mr |>
  group_by(pid, stim_type, stim_set, angle, correct) |>
  summarise(items = n_distinct(item),
            median_rt = median(rt, na.rm = TRUE)) |>
  mutate(correct = if_else(correct, "corrent", "incorrect"))

mr_set_rt <- mr_subject_set_rt |>
  group_by(stim_type, stim_set, angle, correct) |>
  summarise(rt = mean(median_rt),
            sd = sd(median_rt),
            n = n(),
            se = sd / sqrt(n))

ggplot(mr_subject_set_rt, aes(x = angle, y = median_rt, colour = stim_type)) +
  facet_grid(cols = vars(stim_set), row = vars(correct), scales = "free_x", space = "free_x") +
  geom_jitter(alpha = 0.5, size = 0.8) +
  geom_pointrange(aes(y = rt, ymin = rt - 1.96 * se, ymax = rt + 1.96 * se),
                  data = mr_set_rt) +
  geom_line(aes(y = rt), data = mr_set_rt) +
  scale_x_continuous(breaks = unique(mr_subject_set_rt$angle)) +
  scale_colour_ptol(guide = "none") +
  labs(x = "Angle", y = "Response time (seconds)", colour = "")
ggsave("plots/mr_rt_set.png", width = 10, height = 5)
```

```{r}
matrix <- trials_ids |>
  filter(task_id == "matrix-reasoning") |>
  arrange(pid, trial_index) |>
  select(pid, age, item, correct, rt) |>
  mutate(rt = as.numeric(rt),
         pid = pid |> fct_inorder() |> as.numeric())

# write_rds(matrix, "data/colombia-matrix-reasoning.rds")
```

```{r}
# ntl_threshold <- .05
score_ntl <- function(item, answer, response, threshold = 0.05) {
  max_value <- as.numeric(str_extract(item, "\\d+(?=\\})"))
  abs(as.numeric(response) - as.numeric(answer)) / max_value < threshold
}

trials_numberline <- trials_ids |>
  filter(!is.na(item), str_detect(task, "line")) |>
  select(subtask, item, expected_answer, pid, response) |>
  mutate(subtask = fct_recode(subtask, "ntl" = "number-to-line", "ltn" = "line-to-number")) |>
  pivot_wider(names_from = subtask, values_from = response) |>
  mutate(correct_ltn = expected_answer == ltn,
         correct_ntl_5 = score_ntl(item, expected_answer, ntl, 0.05),
         correct_ntl_10 = score_ntl(item, expected_answer, ntl, 0.1),
         correct_ntl_15 = score_ntl(item, expected_answer, ntl, 0.15)) |>
  select(-ltn, -ntl) |>
  pivot_longer(cols = contains("correct"), names_to = "metric", values_to = "correct")

line_summary <- trials_numberline |>
  mutate(metric = metric |>
           fct_recode("line-to-number" = "correct_ltn",
                      "number-to-line (5%)" = "correct_ntl_5",
                      "number-to-line (10%)" = "correct_ntl_10",
                      "number-to-line (15%)" = "correct_ntl_15") |>
           fct_inorder()) |>
  group_by(item, expected_answer, metric) |>
  summarise(subjects = n_distinct(pid),
            trials = n(),
            num_correct = sum(correct, na.rm = TRUE),
            prop_correct = num_correct / trials) |>
  ungroup() |>
  arrange(metric, prop_correct) |>
  mutate(item_label = paste(str_replace(item, "'0': (\\d+), '1': (\\d+)", "\\1-\\2"), expected_answer),
         item_label = fct_inorder(item_label),
         item_index = factor(row_number()))
         # item_index = paste(metric, item_label) |> fct_inorder())

ggplot(line_summary, aes(x = prop_correct, y = item_index)) +
  facet_wrap(vars(metric), scales = "free_y", nrow = 1) +
  # geom_hline(aes(yintercept = item_label), color = "lightgrey") +
  geom_point() +
  # scale_x_continuous(breaks = round(unique(ltn$prop_correct), 2)) +
  scale_y_discrete(breaks = line_summary$item_index, labels = line_summary$item_label) +
  labs(x = "Proportion correct responses", y = "Item") +
  theme(panel.grid.major.y = element_line(colour = "lightgrey", linewidth = 0.2))
ggsave("plots/line_items.png", width = 12, height = 5)

line_summary |>
  select(item_label, metric, prop_correct) |>
  pivot_wider(names_from = metric, values_from = prop_correct) |>
  pivot_longer(contains("number-"), names_to = "metric", values_to = "correct") |>
  mutate(metric = paste("Percent correct in", metric) |> fct_inorder()) |>
  ggplot(aes(x = `line-to-number`, y = correct)) +
    facet_wrap(vars(metric), switch = TRUE) +
    geom_point() +
    geom_smooth(method = "lm") +
    labs(x = "Percent correct in line-to-number") +
    theme(strip.placement = "outside",
          axis.title.y = element_blank())
ggsave("plots/line_items_corrs.png", width = 10, height = 4)

# ggsave("plots/line_items_ltn.png", width = 9, height = 5)
# ggsave("plots/line_items_ntl.png", width = 8, height = 5)

# ggplot(line_summary, aes(x = prop_correct, y = item_label, color = subtask)) +
#   # facet_wrap(vars(subtask), scales = "free_y") +
#   # geom_hline(aes(yintercept = item_label), color = "lightgrey") +
#   geom_point() +
#   scale_color_ptol() +
#   # scale_x_continuous(breaks = round(unique(ltn$prop_correct), 2)) +
#   labs(x = "Proportion correct responses", y = "Item") +
#   theme(panel.grid.major.y = element_line(colour = "lightgrey", linewidth = 0.2))
# 
# ggplot(line_summary, aes(x = subtask, y = prop_correct)) +
#   # facet_wrap(vars(subtask), scales = "free_y") +
#   # geom_hline(aes(yintercept = item_label), color = "lightgrey") +
#   geom_point() +
#   geom_line(aes(group = item_label)) +
#   # scale_color_ptol() +
#   # scale_x_continuous(breaks = round(unique(ltn$prop_correct), 2)) +
#   labs(x = "Proportion correct responses", y = "Item") +
#   theme(panel.grid.major.y = element_line(colour = "lightgrey", linewidth = 0.2))
```

